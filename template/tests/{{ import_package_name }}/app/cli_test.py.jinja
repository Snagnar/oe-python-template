"""Tests to verify the CLI functionality of the app module."""

import pytest
from typer.testing import CliRunner

from {{ import_package_name }}.cli import cli


@pytest.fixture
def runner() -> CliRunner:
    """Provide a CLI test runner fixture."""
    return CliRunner()


def test_cli_app_help(runner: CliRunner) -> None:
    """Check app help works."""
    result = runner.invoke(cli, ["app", "--help"])
    assert result.exit_code == 0


def test_cli_app_run(runner: CliRunner, monkeypatch: pytest.MonkeyPatch) -> None:
    """Check gui_run called with expected parameters on app start."""
    # Create a mock for gui_run
    mock_called = False
    mock_args = {}

    def mock_gui_run(native=False, show=False, host=None, port=None, title="", icon="", watch=False, with_api=False):  # noqa: PLR0913, PLR0917
        nonlocal mock_called, mock_args
        mock_called = True
        mock_args = {
            "native": native,
            "show": show,
            "host": host,
            "port": port,
            "title": title,
            "icon": icon,
            "watch": watch,
            "with_api": with_api,
        }

    # Apply the mock to the gui_run function
    monkeypatch.setattr("oe_python_template.app._cli.gui_run", mock_gui_run)

    # Run the CLI command
    result = runner.invoke(cli, ["app"])

    # Check that the command executed successfully
    assert result.exit_code == 0

    # Check that gui_run was called
    assert mock_called, "gui_run was not called"

    # Check that gui_run was called with the expected arguments
    assert mock_args["native"] is True, "native parameter should be True"
    assert mock_args["with_api"] is False, "with_api parameter should be False"
    assert mock_args["title"] == "OE Python Template", "title parameter is incorrect"
    assert mock_args["icon"] == "ðŸ§ ", "icon parameter is incorrect"
